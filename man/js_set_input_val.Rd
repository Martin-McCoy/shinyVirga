% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_js.R
\name{js_set_input_val}
\alias{js_set_input_val}
\title{Create a javascript callback that runs when shiny connects.}
\usage{
js_set_input_val(
  id,
  value,
  js = NULL,
  ...,
  value_to = c("code", "chr", "json")[1],
  asis = FALSE,
  as_callback = FALSE,
  on = NULL,
  as_tag = FALSE,
  priority_event = TRUE,
  .ns = ns_find()
)
}
\arguments{
\item{id}{\code{(chr)} Automatically namespaced with \code{ns} if inside a module}

\item{value}{\code{(js)} arbitrary js code that defines the value to bind. Can also be a variable name if declared in the \code{js} argument}

\item{js}{\code{(chr)} path to js file with just the anonymous function, or js code to interpolate into a generalized anonymous javascript function that uses glue insertions demarcated by \code{{{}}}:
\preformatted{
(e) => {
         console.log('{{input}} event');
         {{js}}
Shiny.setInputValue('{{input}}', {{value}}, {priority: 'event'});
};}}

\item{...}{\code{(additional named arguments)} corresponding to any arguments that need be interpolated with \link[glue]{glue}}

\item{value_to}{\code{chr} One of:
\itemize{
\item{\code{code}}{ The object will be treated as raw javascript code \strong{Default}}
\item{\code{chr}}{ The object will be treated as as JS character string}
\item{\code{json}}{ The object will be coerced with \code{\link[jsonlite]{toJSON}}}
}}

\item{asis}{If \code{TRUE}, use the ID as-is even when inside a module
(instead of adding the namespace prefix to the ID).}

\item{as_callback}{\code{lgl} Should the resulting code be wrapped in a callback function?}

\item{on}{\code{chr} A javascript event name, must be specified with a selector to argument \code{on_dom} that indicates the jQuery selector for a DOM element to which the event will pertain.}

\item{as_tag}{\code{lgl} Whether the output should be a script tag.}

\item{priority_event}{\code{lgl} Is the priority event level. See \href{https://shiny.posit.co/r/articles/build/communicating-with-js/}{Communicating with JS} for details.}

\item{.ns}{\code{fun} ns function. Typically found automatically.}

\item{add_tag}{\code{lgl} whether to enclose in a script tag}
}
\value{
\code{chr/shiny.tag} script tag with javascript
}
\description{
Create a javascript callback that runs when shiny connects.
}
\seealso{
Other JS: 
\code{\link{js_after}()},
\code{\link{js_callback}()},
\code{\link{js_callout}()},
\code{\link{js_glow}()},
\code{\link{js_mouseover_once}()},
\code{\link{use_driver.js}()}
}
\concept{JS}
